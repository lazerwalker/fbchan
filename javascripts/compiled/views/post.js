// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app.views.Post = (function(_super) {

    __extends(Post, _super);

    function Post() {
      this.clickPermalink = __bind(this.clickPermalink, this);

      this.clickLike = __bind(this.clickLike, this);
      return Post.__super__.constructor.apply(this, arguments);
    }

    Post.prototype.sharedEvents = {
      'click .permalink': "clickPermalink",
      'click .like': "clickLike"
    };

    Post.prototype.events = function() {
      return this.sharedEvents;
    };

    Post.prototype.initialize = function(options) {
      var key, value, _results,
        _this = this;
      this.model.on('change', function() {
        return _this.render();
      });
      _results = [];
      for (key in options) {
        value = options[key];
        _results.push(this[key] = value);
      }
      return _results;
    };

    Post.prototype.render = function() {
      var $parent, html;
      if (!this.message()) {
        return;
      }
      if (this.isDetailView) {
        $parent = $("#content");
        $parent.html('');
        this.$el.appendTo($parent);
      }
      html = ich.post(this);
      this.$el.html(html);
      $('.dateTime').timeago();
      return this.$el;
    };

    Post.prototype.avatar = function() {
      return "https://graph.facebook.com/" + (this.uid()) + "/picture";
    };

    Post.prototype.id = function() {
      return this.model.get('id');
    };

    Post.prototype.uid = function() {
      var _ref;
      return (_ref = this.model.get('from')) != null ? _ref['id'] : void 0;
    };

    Post.prototype.message = function() {
      return this.model.get('message');
    };

    Post.prototype.name = function() {
      var _ref;
      return (_ref = this.model.get('from')) != null ? _ref.name : void 0;
    };

    Post.prototype.recipient = function() {
      var _ref;
      return (_ref = this.model.get('to')) != null ? _ref.data[0].name : void 0;
    };

    Post.prototype.timestamp = function() {
      return this.model.get('created_time');
    };

    Post.prototype.picture = function() {
      var pic;
      pic = this.model.get('picture');
      if (pic != null) {
        return pic.replace(/_[a-z]\.jpg$/, '_n.jpg');
      }
    };

    Post.prototype.commentLink = function() {
      return this.model.get('actions')[0].link;
    };

    Post.prototype.link = function() {
      if (this.model.get('link')) {
        return {
          link: this.model.get('link'),
          linkName: this.model.get('name'),
          description: this.model.get('description')
        };
      }
    };

    Post.prototype.commentCount = function() {
      return this.model.get('comments').count;
    };

    Post.prototype.likeCount = function() {
      return this.model.get('likes').count;
    };

    Post.prototype.comments = function() {
      var comment, commentData, commentObj, comments, view, _i, _len, _ref;
      commentObj = this.model.get('comments');
      if (!(commentObj && commentObj.count > 0 && commentObj.data)) {
        return [];
      }
      comments = [];
      _ref = commentObj.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        commentData = _ref[_i];
        comment = new app.Post(commentData);
        view = new app.views.Comment({
          model: comment
        });
        comments.push(view.render().html());
      }
      return comments;
    };

    Post.prototype.likes = function() {
      var like, likeData, likes, view, _i, _len, _ref;
      if (this.model.get('likes') == null) {
        return [];
      }
      likes = [];
      _ref = this.model.get('likes').data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        likeData = _ref[_i];
        like = new app.Post(likeData);
        view = new app.views.Like({
          model: like
        });
        likes.push(view.render().html());
      }
      return likes;
    };

    Post.prototype.commentsAndLikes = function() {
      return this.comments().concat(this.likes());
    };

    Post.prototype.likeable = function() {
      var like, _ref;
      like = _((_ref = this.model.get('likes')) != null ? _ref['data'] : void 0).find(function(obj) {
        var _ref;
        return obj.id === ((_ref = app.me) != null ? _ref.id : void 0);
      });
      return !(like != null);
    };

    Post.prototype.clickLike = function() {
      this.model.like();
      return false;
    };

    Post.prototype.clickPermalink = function() {
      app.renderItem(this.model);
      app.router.navigate("/post/" + (this.model.get('id')));
      return false;
    };

    return Post;

  })(Backbone.View);

}).call(this);
